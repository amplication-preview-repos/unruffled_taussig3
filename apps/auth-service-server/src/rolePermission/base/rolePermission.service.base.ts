/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, RolePermission as PrismaRolePermission } from "@prisma/client";

export class RolePermissionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RolePermissionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.rolePermission.count(args);
  }

  async rolePermissions(
    args: Prisma.RolePermissionFindManyArgs
  ): Promise<PrismaRolePermission[]> {
    return this.prisma.rolePermission.findMany(args);
  }
  async rolePermission(
    args: Prisma.RolePermissionFindUniqueArgs
  ): Promise<PrismaRolePermission | null> {
    return this.prisma.rolePermission.findUnique(args);
  }
  async createRolePermission(
    args: Prisma.RolePermissionCreateArgs
  ): Promise<PrismaRolePermission> {
    return this.prisma.rolePermission.create(args);
  }
  async updateRolePermission(
    args: Prisma.RolePermissionUpdateArgs
  ): Promise<PrismaRolePermission> {
    return this.prisma.rolePermission.update(args);
  }
  async deleteRolePermission(
    args: Prisma.RolePermissionDeleteArgs
  ): Promise<PrismaRolePermission> {
    return this.prisma.rolePermission.delete(args);
  }
}
