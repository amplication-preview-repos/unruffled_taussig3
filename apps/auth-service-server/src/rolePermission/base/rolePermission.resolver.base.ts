/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RolePermission } from "./RolePermission";
import { RolePermissionCountArgs } from "./RolePermissionCountArgs";
import { RolePermissionFindManyArgs } from "./RolePermissionFindManyArgs";
import { RolePermissionFindUniqueArgs } from "./RolePermissionFindUniqueArgs";
import { DeleteRolePermissionArgs } from "./DeleteRolePermissionArgs";
import { RolePermissionService } from "../rolePermission.service";
@graphql.Resolver(() => RolePermission)
export class RolePermissionResolverBase {
  constructor(protected readonly service: RolePermissionService) {}

  async _rolePermissionsMeta(
    @graphql.Args() args: RolePermissionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RolePermission])
  async rolePermissions(
    @graphql.Args() args: RolePermissionFindManyArgs
  ): Promise<RolePermission[]> {
    return this.service.rolePermissions(args);
  }

  @graphql.Query(() => RolePermission, { nullable: true })
  async rolePermission(
    @graphql.Args() args: RolePermissionFindUniqueArgs
  ): Promise<RolePermission | null> {
    const result = await this.service.rolePermission(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RolePermission)
  async deleteRolePermission(
    @graphql.Args() args: DeleteRolePermissionArgs
  ): Promise<RolePermission | null> {
    try {
      return await this.service.deleteRolePermission(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
